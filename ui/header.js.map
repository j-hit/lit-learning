{"version":3,"file":"header.js","sourceRoot":"","sources":["../src/ui/header.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAa9C,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QA+CL,SAAI,GAAG,OAAO,CAAC;QAGf,YAAO,GAAG,SAAS,CAAC;QAGpB,WAAM,GAAG,KAAK,CAAC;QAGf,YAAO,GAAG,iBAAiB,CAAC;QAG5B,SAAI,GAAG,IAAI,CAAC;QAGZ,YAAO,GAAuC,EAAE,CAAC;IA6BnD,CAAC;IA3BU,MAAM;QACb,MAAM,OAAO,GAAG,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC;QAEtC,OAAO,IAAI,CAAA;sBACO,QAAQ,CAAC,OAAO,CAAC;eACxB,IAAI,CAAC,IAAI;cACV,IAAI,CAAC,OAAO;;UAEhB,IAAI,CAAC,OAAO;YACZ,CAAC,CAAC,IAAI,CAAA;;kBAEE,IAAI,CAAC,OAAO,CAAC,GAAG,CAChB,CAAC,MAAM,EAAE,EAAE,CACT,IAAI,CAAA;gCACQ,MAAM,CAAC,OAAO;6BACjB,MAAM,CAAC,IAAI;8BACV,MAAM,CAAC,KAAK;gCACV,MAAM,CAAC,MAAM;yBACpB,MAAM,CAAC,IAAI;sBACd,CACL;;aAEJ;YACH,CAAC,CAAC,IAAI;;KAEX,CAAC;IACJ,CAAC;;AAzFe,eAAM,GAAG;IACvB,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyCF;CACF,AA3CqB,CA2CpB;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCACV;AAGf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCACL;AAGpB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;wCACX;AAGf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCACG;AAG5B;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCACb;AAGZ;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;yCACyB;AA9DtC,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CA2FpB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {MyButton, MyButtonProps} from './button';\n\nexport interface MyHeaderProps {\n  size: string;\n  variant: string;\n  shadow: boolean;\n  heading: string;\n  logo: string;\n  buttons: (MyButtonProps & {text: string})[];\n}\n\n@customElement('my-header')\nexport class MyHeader extends LitElement {\n  static override styles = [\n    css`\n      :host {\n        display: block;\n\n        --my-header-background-color: orange;\n        --my-header-color: white;\n        --my-header-border: none;\n        --my-header-font-size: 20px;\n        --my-header-padding: 16px;\n\n        header {\n          background-color: var(--my-header-background-color, lightgray);\n          border: var(--my-header-border, none);\n          font-size: var(--my-header-font-size);\n          padding: var(--my-header-padding);\n          color: var(--my-header-color, white);\n          display: grid;\n          grid-template-columns: 50px 1fr min-content;\n          align-items: center;\n        }\n      }\n\n      :host([size='small']) {\n        --my-header-padding: 8px;\n        --my-header-font-size: 14px;\n      }\n\n      :host([variant='secondary']) {\n        --my-header-background-color: white;\n        --my-header-color: black;\n        --my-header-border: 1px solid orange;\n      }\n\n      .shadow {\n        box-shadow: 8px 8px 8px rgba(0, 0, 0, 0.8);\n      }\n\n      .button-group {\n        display: flex;\n        gap: 8px;\n      }\n    `,\n  ];\n\n  @property({type: String})\n  size = 'large';\n\n  @property({type: String})\n  variant = 'primary';\n\n  @property({type: Boolean})\n  shadow = false;\n\n  @property({type: String})\n  heading = 'Your title here';\n\n  @property({type: String})\n  logo = 'üåç';\n\n  @property({type: Array})\n  buttons: (MyButtonProps & {text: string})[] = [];\n\n  override render() {\n    const classes = {shadow: this.shadow};\n\n    return html`\n      <header class=${classMap(classes)}>\n        <div>${this.logo}</div>\n        <h1>${this.heading}</h1>\n        <my-button variant=\"secondary\" shape=\"square\">X</my-button>\n        ${this.buttons\n          ? html`\n              <section class=\"button-group\">\n                ${this.buttons.map(\n                  (button) =>\n                    html`<my-button\n                      variant=${button.variant}\n                      size=${button.size}\n                      shape=${button.shape}\n                      ?shadow=${button.shadow}\n                      >${button.text}</my-button\n                    >`\n                )}\n              </section>\n            `\n          : null}\n      </header>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-header': MyHeader;\n    'my-button': MyButton;\n  }\n}\n"]}