{"version":3,"file":"button.js","sourceRoot":"","sources":["../src/ui/button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AASrD;;;GAGG;AAEI,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QAsDL,SAAI,GAAG,OAAO,CAAC;QAGf,UAAK,GAAG,WAAW,CAAC;QAGpB,YAAO,GAAG,SAAS,CAAC;QAGpB,WAAM,GAAG,KAAK,CAAC;IAejB,CAAC;IAbU,MAAM;QACb,MAAM,OAAO,GAAG,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC;QAEtC,OAAO,IAAI,CAAA;sBACO,QAAQ,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,QAAQ;;;KAG1D,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC3D,CAAC;;AA5Ee,eAAM,GAAG;IACvB,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgDF;CACF,AAlDqB,CAkDpB;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCACV;AAGf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;uCACL;AAGpB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCACL;AAGpB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;wCACX;AA/DJ,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CA8EpB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport interface MyButtonProps {\n  size: string;\n  shape: string;\n  variant: string;\n  shadow: boolean;\n}\n\n/**\n * An example button.\n *\n */\n@customElement('my-button')\nexport class MyButton extends LitElement implements MyButtonProps {\n  static override styles = [\n    css`\n      :host {\n        display: block;\n        max-width: 90ch;\n        flex-shrink: 0;\n\n        --my-button-background-color: orange;\n        --my-button-color: white;\n        --my-button-border: none;\n        --my-button-font-size: 20px;\n        --my-button-padding: 16px;\n        --my-button-aspect-ratio: unset;\n\n        button {\n          background-color: var(--my-button-background-color, lightgray);\n          border: var(--my-button-border, none);\n          font-size: var(--my-button-font-size);\n          padding: var(--my-button-padding);\n          color: var(--my-button-color, white);\n\n          text-align: center;\n          text-decoration: none;\n          display: inline-block;\n          cursor: pointer;\n          width: 100%;\n          aspect-ratio: var(--my-button-aspect-ratio, unset);\n          border-radius: 8px;\n        }\n      }\n\n      :host([size='small']) {\n        --my-button-padding: 8px;\n        --my-button-font-size: 14px;\n      }\n\n      :host([variant='secondary']) {\n        --my-button-background-color: white;\n        --my-button-color: black;\n        --my-button-border: 1px solid orange;\n      }\n\n      :host([shape='square']) {\n        --my-button-aspect-ratio: 1 / 1;\n      }\n\n      .shadow {\n        box-shadow: 8px 8px 8px rgba(0, 0, 0, 0.8);\n      }\n    `,\n  ];\n\n  @property({type: String})\n  size = 'large';\n\n  @property({type: String})\n  shape = 'rectangle';\n\n  @property({type: String})\n  variant = 'primary';\n\n  @property({type: Boolean})\n  shadow = false;\n\n  override render() {\n    const classes = {shadow: this.shadow};\n\n    return html`\n      <button class=${classMap(classes)} @click=${this._onClick}>\n        <slot></slot>\n      </button>\n    `;\n  }\n\n  private _onClick() {\n    this.dispatchEvent(new CustomEvent('my-button-clicked'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-button': MyButton;\n  }\n}\n"]}