{"version":3,"file":"my-element copy.js","sourceRoot":"","sources":["src/my-element copy.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,aAAa,EAAC,MAAM,oCAAoC,CAAC;AAEjE;;;;;;GAMG;AAEI,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAgBL;;WAEG;QAMH,SAAI,GAAG,OAAO,CAAC;QAEf;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;QAEV,uCAAuC;QACvC,4BAA4B;QAE5B,YAAO,GAAG,CAAC,CAAC;QAEZ,4CAA4C;QAE5C,WAAM,GAAG,OAAO,CAAC;QAEjB;;;WAGG;QAEH,WAAM,GAAG,EAAE,CAAC;QAEZ;;;;;;;WAOG;QAEH,SAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAElB;;WAEG;QAEH,WAAM,GAAG,KAAK,CAAC;IA2CjB,CAAC;IAzCU,MAAM;QACb,MAAM,WAAW,GAA+B;YAC9C,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,MAAM;YACb,GAAG,EAAE,SAAS;SACf,CAAC;QAEF,OAAO,IAAI,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;uBACb,IAAI,CAAC,QAAQ;uBACb,IAAI,CAAC,KAAK;;qBAEZ,IAAI,CAAC,OAAO;oBACb,IAAI,CAAC,MAAM;;iBAEd,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC;;;;sBAIxD,IAAI,CAAC,MAAM;0BACP,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;;;;;KAKvD,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;;AAxGe,gBAAM,GAAG;IACvB,GAAG,CAAA;;;;;;;;;;;KAWF;CACF,AAbqB,CAapB;AAUF;IALC,QAAQ,CAAC;QACR,UAAU,CAAC,QAAgB,EAAE,QAAgB;YAC3C,OAAO,QAAQ,EAAE,WAAW,EAAE,KAAK,QAAQ,EAAE,WAAW,EAAE,CAAC;QAC7D,CAAC;KACF,CAAC;uCACa;AAMf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACf;AAKV;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;0CACb;AAIZ;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC;yCAChB;AAOjB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;yCACjB;AAWZ;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;uCACtD;AAMlB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;yCAC1B;AA/DJ,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA0GrB","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {dateConverter} from './custom-converters/date-converter';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static override styles = [\n    css`\n      :host {\n        display: block;\n        border: solid 1px gray;\n        padding: 16px;\n        max-width: 800px;\n      }\n\n      :host([active]) {\n        border: 1px solid red;\n      }\n    `,\n  ];\n\n  /**\n   * The name to say \"Hello\" to.\n   */\n  @property({\n    hasChanged(newValue: string, oldValue: string) {\n      return newValue?.toLowerCase() !== oldValue?.toLowerCase();\n    },\n  })\n  name = 'World';\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({type: Number})\n  count = 0;\n\n  // observed attribute name is \"myvalue\"\n  // Use the default converter\n  @property({type: Number})\n  myValue = 0;\n\n  // Observed attribute will be called my-name\n  @property({attribute: 'my-name'})\n  myName = 'Ogden';\n\n  /**\n   * No observed attribute for this property.\n   * The property will not be initialized from attributes in markup, and attribute changes won't affect it.\n   */\n  @property({attribute: false})\n  myData = {};\n\n  /**\n   * Property with a custom converter\n   * Value of property \"date\" will reflect to attribute \"date\".\n   * Reflecting properties to attributes should be done sparingly\n   *\n   * Reflecting properties of type object or array is not recommended.\n   * This can cause large objects to serialize to the DOM which can result in poor performance.\n   */\n  @property({converter: dateConverter(navigator.language), reflect: true})\n  date = new Date();\n\n  /**\n   * Boolean properties must default to false\n   */\n  @property({type: Boolean, reflect: true})\n  active = false;\n\n  override render() {\n    const dateOptions: Intl.DateTimeFormatOptions = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    return html`\n      <h1>${this.sayHello(this.name)}!</h1>\n      <button @click=${this._onClick} part=\"button\">\n        Click Count: ${this.count}\n      </button>\n      <p>myValue = ${this.myValue}</p>\n      <p>myName = ${this.myName}</p>\n      <p>\n        date = ${this.date.toLocaleDateString(navigator.language, dateOptions)}\n      </p>\n\n      <section>\n        <p>active = ${this.active}</p>\n        <button @click=\"${() => (this.active = !this.active)}\">\n          Toggle active\n        </button>\n      </section>\n      <slot></slot>\n    `;\n  }\n\n  private _onClick() {\n    this.count++;\n    this.dispatchEvent(new CustomEvent('count-changed'));\n  }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement;\n  }\n}\n"]}